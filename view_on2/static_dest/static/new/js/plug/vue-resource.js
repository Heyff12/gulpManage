!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):t.VueResource=n()}(this,function(){"use strict";function t(t){this.state=tt,this.value=void 0,this.deferred=[];var n=this;try{t(function(t){n.resolve(t)},function(t){n.reject(t)})}catch(t){n.reject(t)}}function n(t,n){t instanceof et?this.promise=t:this.promise=new et(t.bind(n)),this.context=n}function e(t){it=t.util,rt=t.config.debug||!t.config.silent}function o(t){"undefined"!=typeof console&&rt&&console.warn("[VueResource warn]: "+t)}function r(t){"undefined"!=typeof console&&console.error(t)}function i(t,n){return it.nextTick(t,n)}function u(t){return t.replace(/^\s*|\s*$/g,"")}function s(t){return"string"==typeof t}function c(t){return t===!0||t===!1}function a(t){return"function"==typeof t}function f(t){return null!==t&&"object"==typeof t}function h(t){return f(t)&&Object.getPrototypeOf(t)==Object.prototype}function p(t){return"undefined"!=typeof FormData&&t instanceof FormData}function l(t,e,o){var r=n.resolve(t);return arguments.length<2?r:r.then(e,o)}function d(t,n,e){return e=e||{},a(e)&&(e=e.call(n)),v(t.bind({$vm:n,$options:e}),t,{$options:e})}function m(t,n){var e,o;if("number"==typeof t.length)for(e=0;e<t.length;e++)n.call(t[e],t[e],e);else if(f(t))for(o in t)t.hasOwnProperty(o)&&n.call(t[o],t[o],o);return t}function v(t){var n=ut.slice.call(arguments,1);return n.forEach(function(n){g(t,n,!0)}),t}function y(t){var n=ut.slice.call(arguments,1);return n.forEach(function(n){for(var e in n)void 0===t[e]&&(t[e]=n[e])}),t}function b(t){var n=ut.slice.call(arguments,1);return n.forEach(function(n){g(t,n)}),t}function g(t,n,e){for(var o in n)e&&(h(n[o])||st(n[o]))?(h(n[o])&&!h(t[o])&&(t[o]={}),st(n[o])&&!st(t[o])&&(t[o]=[]),g(t[o],n[o],e)):void 0!==n[o]&&(t[o]=n[o])}function w(t,n){var e=n(t);return s(t.root)&&!e.match(/^(https?:)?\//)&&(e=t.root+"/"+e),e}function T(t,n){var e=Object.keys(A.options.params),o={},r=n(t);return m(t.params,function(t,n){e.indexOf(n)===-1&&(o[n]=t)}),o=A.params(o),o&&(r+=(r.indexOf("?")==-1?"?":"&")+o),r}function j(t,n,e){var o=E(t),r=o.expand(n);return e&&e.push.apply(e,o.vars),r}function E(t){var n=["+","#",".","/",";","?","&"],e=[];return{vars:e,expand:function(o){return t.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(t,r,i){if(r){var u=null,s=[];if(n.indexOf(r.charAt(0))!==-1&&(u=r.charAt(0),r=r.substr(1)),r.split(/,/g).forEach(function(t){var n=/([^:\*]*)(?::(\d+)|(\*))?/.exec(t);s.push.apply(s,x(o,u,n[1],n[2]||n[3])),e.push(n[1])}),u&&"+"!==u){var c=",";return"?"===u?c="&":"#"!==u&&(c=u),(0!==s.length?u:"")+s.join(c)}return s.join(",")}return U(i)})}}}function x(t,n,e,o){var r=t[e],i=[];if(O(r)&&""!==r)if("string"==typeof r||"number"==typeof r||"boolean"==typeof r)r=r.toString(),o&&"*"!==o&&(r=r.substring(0,parseInt(o,10))),i.push(C(n,r,P(n)?e:null));else if("*"===o)Array.isArray(r)?r.filter(O).forEach(function(t){i.push(C(n,t,P(n)?e:null))}):Object.keys(r).forEach(function(t){O(r[t])&&i.push(C(n,r[t],t))});else{var u=[];Array.isArray(r)?r.filter(O).forEach(function(t){u.push(C(n,t))}):Object.keys(r).forEach(function(t){O(r[t])&&(u.push(encodeURIComponent(t)),u.push(C(n,r[t].toString())))}),P(n)?i.push(encodeURIComponent(e)+"="+u.join(",")):0!==u.length&&i.push(u.join(","))}else";"===n?i.push(encodeURIComponent(e)):""!==r||"&"!==n&&"?"!==n?""===r&&i.push(""):i.push(encodeURIComponent(e)+"=");return i}function O(t){return void 0!==t&&null!==t}function P(t){return";"===t||"&"===t||"?"===t}function C(t,n,e){return n="+"===t||"#"===t?U(n):encodeURIComponent(n),e?encodeURIComponent(e)+"="+n:n}function U(t){return t.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t)),t}).join("")}function R(t){var n=[],e=j(t.url,t.params,n);return n.forEach(function(n){delete t.params[n]}),e}function A(t,n){var e,o=this||{},r=t;return s(t)&&(r={url:t,params:n}),r=v({},A.options,o.$options,r),A.transforms.forEach(function(t){e=S(t,e,o.$vm)}),e(r)}function S(t,n,e){return function(o){return t.call(e,o,n)}}function k(t,n,e){var o,r=st(n),i=h(n);m(n,function(n,u){o=f(n)||st(n),e&&(u=e+"["+(i||o?u:"")+"]"),!e&&r?t.add(n.name,n.value):o?k(t,n,u):t.add(u,n)})}function H(t){return new n(function(n){var e=new XDomainRequest,o=function(o){var r=t.respondWith(e.responseText,{status:e.status,statusText:e.statusText});n(r)};t.abort=function(){return e.abort()},e.open(t.method,t.getUrl(),!0),e.timeout=0,e.onload=o,e.onerror=o,e.ontimeout=function(){},e.onprogress=function(){},e.send(t.getBody())})}function I(t,n){!c(t.crossOrigin)&&L(t)&&(t.crossOrigin=!0),t.crossOrigin&&(pt||(t.client=H),delete t.emulateHTTP),n()}function L(t){var n=A.parse(A(t));return n.protocol!==ht.protocol||n.host!==ht.host}function q(t,n){t.emulateJSON&&h(t.body)&&(t.body=A.params(t.body),t.headers["Content-Type"]="application/x-www-form-urlencoded"),p(t.body)&&delete t.headers["Content-Type"],h(t.body)&&(t.body=JSON.stringify(t.body)),n(function(t){var n=t.headers["Content-Type"];if(s(n)&&0===n.indexOf("application/json"))try{t.data=t.json()}catch(n){t.data=null}else t.data=t.text()})}function N(t){return new n(function(n){var e,o,r=t.jsonp||"callback",i="_jsonp"+Math.random().toString(36).substr(2),u=null;e=function(e){var r=0;"load"===e.type&&null!==u?r=200:"error"===e.type&&(r=404),n(t.respondWith(u,{status:r})),delete window[i],document.body.removeChild(o)},t.params[r]=i,window[i]=function(t){u=JSON.stringify(t)},o=document.createElement("script"),o.src=t.getUrl(),o.type="text/javascript",o.async=!0,o.onload=e,o.onerror=e,document.body.appendChild(o)})}function D(t,n){"JSONP"==t.method&&(t.client=N),n(function(n){"JSONP"==t.method&&(n.data=n.json())})}function J(t,n){a(t.before)&&t.before.call(this,t),n()}function M(t,n){t.emulateHTTP&&/^(PUT|PATCH|DELETE)$/i.test(t.method)&&(t.headers["X-HTTP-Method-Override"]=t.method,t.method="POST"),n()}function X(t,n){t.method=t.method.toUpperCase(),t.headers=ct({},_.headers.common,t.crossOrigin?{}:_.headers.custom,_.headers[t.method.toLowerCase()],t.headers),n()}function W(t,n){var e;t.timeout&&(e=setTimeout(function(){t.abort()},t.timeout)),n(function(t){clearTimeout(e)})}function B(t){return new n(function(n){var e=new XMLHttpRequest,o=function(o){var r=t.respondWith("response"in e?e.response:e.responseText,{status:1223===e.status?204:e.status,statusText:1223===e.status?"No Content":u(e.statusText),headers:F(e.getAllResponseHeaders())});n(r)};t.abort=function(){return e.abort()},e.open(t.method,t.getUrl(),!0),e.timeout=0,e.onload=o,e.onerror=o,t.progress&&("GET"===t.method?e.addEventListener("progress",t.progress):/^(POST|PUT)$/i.test(t.method)&&e.upload.addEventListener("progress",t.progress)),t.credentials===!0&&(e.withCredentials=!0),m(t.headers||{},function(t,n){e.setRequestHeader(n,t)}),e.send(t.getBody())})}function F(t){var n,e,o,r={};return m(u(t).split("\n"),function(t){o=t.indexOf(":"),e=u(t.slice(0,o)),n=u(t.slice(o+1)),r[e]?st(r[e])?r[e].push(n):r[e]=[r[e],n]:r[e]=n}),r}function G(t){function e(e){return new n(function(n){function s(){r=i.pop(),a(r)?r.call(t,e,c):(o("Invalid interceptor of type "+typeof r+", must be a function"),c())}function c(e){if(a(e))u.unshift(e);else if(f(e))return u.forEach(function(n){e=l(e,function(e){return n.call(t,e)||e})}),void l(e,n);s()}s()},t)}var r,i=[V],u=[];return f(t)||(t=null),e.use=function(t){i.push(t)},e}function V(t,n){var e=t.client||B;n(e(t))}function _(t){var e=this||{},o=G(e.$vm);return y(t||{},e.$options,_.options),_.interceptors.forEach(function(t){o.use(t)}),o(new mt(t)).then(function(t){return t.ok?t:n.reject(t)},function(t){return t instanceof Error&&r(t),n.reject(t)})}function z(t,n,e,o){var r=this||{},i={};return e=ct({},z.actions,e),m(e,function(e,u){e=v({url:t,params:n||{}},o,e),i[u]=function(){return(r.$http||_)(K(e,arguments))}}),i}function K(t,n){var e,o=ct({},t),r={};switch(n.length){case 2:r=n[0],e=n[1];break;case 1:/^(POST|PUT|PATCH)$/i.test(o.method)?e=n[0]:r=n[0];break;case 0:break;default:throw"Expected up to 4 arguments [params, body], got "+n.length+" arguments"}return o.body=e,o.params=ct({},o.params,r),o}function Q(t){Q.installed||(e(t),t.url=A,t.http=_,t.resource=z,t.Promise=n,Object.defineProperties(t.prototype,{$url:{get:function(){return d(t.url,this,this.$options.url)}},$http:{get:function(){return d(t.http,this,this.$options.http)}},$resource:{get:function(){return t.resource.bind(this)}},$promise:{get:function(){var n=this;return function(e){return new t.Promise(e,n)}}}}))}var Y=0,Z=1,tt=2;t.reject=function(n){return new t(function(t,e){e(n)})},t.resolve=function(n){return new t(function(t,e){t(n)})},t.all=function(n){return new t(function(e,o){function r(t){return function(o){u[t]=o,i+=1,i===n.length&&e(u)}}var i=0,u=[];0===n.length&&e(u);for(var s=0;s<n.length;s+=1)t.resolve(n[s]).then(r(s),o)})},t.race=function(n){return new t(function(e,o){for(var r=0;r<n.length;r+=1)t.resolve(n[r]).then(e,o)})};var nt=t.prototype;nt.resolve=function(t){var n=this;if(n.state===tt){if(t===n)throw new TypeError("Promise settled with itself.");var e=!1;try{var o=t&&t.then;if(null!==t&&"object"==typeof t&&"function"==typeof o)return void o.call(t,function(t){e||n.resolve(t),e=!0},function(t){e||n.reject(t),e=!0})}catch(t){return void(e||n.reject(t))}n.state=Y,n.value=t,n.notify()}},nt.reject=function(t){var n=this;if(n.state===tt){if(t===n)throw new TypeError("Promise settled with itself.");n.state=Z,n.value=t,n.notify()}},nt.notify=function(){var t=this;i(function(){if(t.state!==tt)for(;t.deferred.length;){var n=t.deferred.shift(),e=n[0],o=n[1],r=n[2],i=n[3];try{t.state===Y?r("function"==typeof e?e.call(void 0,t.value):t.value):t.state===Z&&("function"==typeof o?r(o.call(void 0,t.value)):i(t.value))}catch(t){i(t)}}})},nt.then=function(n,e){var o=this;return new t(function(t,r){o.deferred.push([n,e,t,r]),o.notify()})},nt.catch=function(t){return this.then(void 0,t)};var et=window.Promise||t;n.all=function(t,e){return new n(et.all(t),e)},n.resolve=function(t,e){return new n(et.resolve(t),e)},n.reject=function(t,e){return new n(et.reject(t),e)},n.race=function(t,e){return new n(et.race(t),e)};var ot=n.prototype;ot.bind=function(t){return this.context=t,this},ot.then=function(t,e){return t&&t.bind&&this.context&&(t=t.bind(this.context)),e&&e.bind&&this.context&&(e=e.bind(this.context)),new n(this.promise.then(t,e),this.context)},ot.catch=function(t){return t&&t.bind&&this.context&&(t=t.bind(this.context)),new n(this.promise.catch(t),this.context)},ot.finally=function(t){return this.then(function(n){return t.call(this),n},function(n){return t.call(this),et.reject(n)})};var rt=!1,it={},ut=[],st=Array.isArray,ct=Object.assign||b,at=document.documentMode,ft=document.createElement("a");A.options={url:"",root:null,params:{}},A.transforms=[R,T,w],A.params=function(t){var n=[],e=encodeURIComponent;return n.add=function(t,n){a(n)&&(n=n()),null===n&&(n=""),this.push(e(t)+"="+e(n))},k(n,t),n.join("&").replace(/%20/g,"+")},A.parse=function(t){return at&&(ft.href=t,t=ft.href),ft.href=t,{href:ft.href,protocol:ft.protocol?ft.protocol.replace(/:$/,""):"",port:ft.port,host:ft.host,hostname:ft.hostname,pathname:"/"===ft.pathname.charAt(0)?ft.pathname:"/"+ft.pathname,search:ft.search?ft.search.replace(/^\?/,""):"",hash:ft.hash?ft.hash.replace(/^#/,""):""}};var ht=A.parse(location.href),pt="withCredentials"in new XMLHttpRequest,lt=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},dt=function(){function t(n,e){var o=e.url,r=e.headers,i=e.status,u=e.statusText;lt(this,t),this.url=o,this.body=n,this.headers=r||{},this.status=i||0,this.statusText=u||"",this.ok=i>=200&&i<300}return t.prototype.text=function(){return this.body},t.prototype.blob=function(){return new Blob([this.body])},t.prototype.json=function(){return JSON.parse(this.body)},t}(),mt=function(){function t(n){lt(this,t),this.method="GET",this.body=null,this.params={},this.headers={},ct(this,n)}return t.prototype.getUrl=function(){return A(this)},t.prototype.getBody=function(){return this.body},t.prototype.respondWith=function(t,n){return new dt(t,ct(n||{},{url:this.getUrl()}))},t}(),vt={"X-Requested-With":"XMLHttpRequest"},yt={Accept:"application/json, text/plain, */*"},bt={"Content-Type":"application/json;charset=utf-8"};return _.options={},_.headers={put:bt,post:bt,patch:bt,delete:bt,custom:vt,common:yt},_.interceptors=[J,W,M,q,D,X,I],["get","delete","head","jsonp"].forEach(function(t){_[t]=function(n,e){return this(ct(e||{},{url:n,method:t}))}}),["post","put","patch"].forEach(function(t){_[t]=function(n,e,o){return this(ct(o||{},{url:n,method:t,body:e}))}}),z.actions={get:{method:"GET"},save:{method:"POST"},query:{method:"GET"},update:{method:"PUT"},remove:{method:"DELETE"},delete:{method:"DELETE"}},"undefined"!=typeof window&&window.Vue&&window.Vue.use(Q),Q});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWcvdnVlLXJlc291cmNlLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiVnVlUmVzb3VyY2UiLCJ0aGlzIiwiUHJvbWlzZSQyIiwiZXhlY3V0b3IiLCJzdGF0ZSIsIlBFTkRJTkciLCJ2YWx1ZSIsInVuZGVmaW5lZCIsImRlZmVycmVkIiwicHJvbWlzZSIsIngiLCJyZXNvbHZlIiwiciIsInJlamVjdCIsImUiLCJQcm9taXNlJDEiLCJjb250ZXh0IiwiUHJvbWlzZU9iaiIsImJpbmQiLCJVdGlsIiwiVnVlIiwidXRpbCIsImRlYnVnIiwiY29uZmlnIiwic2lsZW50Iiwid2FybiIsIm1zZyIsImNvbnNvbGUiLCJlcnJvciIsIm5leHRUaWNrIiwiY2IiLCJjdHgiLCJ0cmltIiwic3RyIiwicmVwbGFjZSIsImlzU3RyaW5nIiwidmFsIiwiaXNCb29sZWFuIiwiaXNGdW5jdGlvbiIsImlzT2JqZWN0Iiwib2JqIiwiaXNQbGFpbk9iamVjdCIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwid2hlbiIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidGhlbiIsIm9wdGlvbnMiLCJmbiIsIm9wdHMiLCJjYWxsIiwibWVyZ2UiLCIkdm0iLCIkb3B0aW9ucyIsImVhY2giLCJpdGVyYXRvciIsImkiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsInRhcmdldCIsImFyZ3MiLCJhcnJheSIsInNsaWNlIiwiZm9yRWFjaCIsInNvdXJjZSIsIl9tZXJnZSIsImRlZmF1bHRzIiwiX2Fzc2lnbiIsImRlZXAiLCJpc0FycmF5Iiwicm9vdCIsIm5leHQiLCJ1cmwiLCJtYXRjaCIsInF1ZXJ5IiwidXJsUGFyYW1zIiwia2V5cyIsIlVybCIsInBhcmFtcyIsImluZGV4T2YiLCJleHBhbmQiLCJ2YXJpYWJsZXMiLCJ0bXBsIiwicGFyc2UiLCJleHBhbmRlZCIsInB1c2giLCJhcHBseSIsInZhcnMiLCJ0ZW1wbGF0ZSIsIm9wZXJhdG9ycyIsIl8iLCJleHByZXNzaW9uIiwibGl0ZXJhbCIsIm9wZXJhdG9yIiwidmFsdWVzIiwiY2hhckF0Iiwic3Vic3RyIiwic3BsaXQiLCJ2YXJpYWJsZSIsInRtcCIsImV4ZWMiLCJnZXRWYWx1ZXMiLCJzZXBhcmF0b3IiLCJqb2luIiwiZW5jb2RlUmVzZXJ2ZWQiLCJtb2RpZmllciIsInJlc3VsdCIsImlzRGVmaW5lZCIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwicGFyc2VJbnQiLCJlbmNvZGVWYWx1ZSIsImlzS2V5T3BlcmF0b3IiLCJBcnJheSIsImZpbHRlciIsImsiLCJlbmNvZGVVUklDb21wb25lbnQiLCJtYXAiLCJwYXJ0IiwidGVzdCIsImVuY29kZVVSSSIsInRyYW5zZm9ybSIsInNlbGYiLCJ0cmFuc2Zvcm1zIiwiaGFuZGxlciIsInZtIiwic2VyaWFsaXplIiwic2NvcGUiLCJoYXNoIiwicGxhaW4iLCJhZGQiLCJuYW1lIiwieGRyQ2xpZW50IiwicmVxdWVzdCIsInhkciIsIlhEb21haW5SZXF1ZXN0IiwiZXZlbnQiLCJyZXNwb25zZSIsInJlc3BvbmRXaXRoIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImFib3J0Iiwib3BlbiIsIm1ldGhvZCIsImdldFVybCIsInRpbWVvdXQiLCJvbmxvYWQiLCJvbmVycm9yIiwib250aW1lb3V0Iiwib25wcm9ncmVzcyIsInNlbmQiLCJnZXRCb2R5IiwiY29ycyIsImNyb3NzT3JpZ2luIiwiU1VQUE9SVFNfQ09SUyIsImNsaWVudCIsImVtdWxhdGVIVFRQIiwicmVxdWVzdFVybCIsInByb3RvY29sIiwiT1JJR0lOX1VSTCIsImhvc3QiLCJib2R5IiwiZW11bGF0ZUpTT04iLCJoZWFkZXJzIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbnRlbnRUeXBlIiwiZGF0YSIsImpzb24iLCJ0ZXh0IiwianNvbnBDbGllbnQiLCJzY3JpcHQiLCJqc29ucCIsImNhbGxiYWNrIiwiTWF0aCIsInJhbmRvbSIsInR5cGUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsInJlbW92ZUNoaWxkIiwiY3JlYXRlRWxlbWVudCIsInNyYyIsImFzeW5jIiwiYXBwZW5kQ2hpbGQiLCJiZWZvcmUiLCJoZWFkZXIiLCJ0b1VwcGVyQ2FzZSIsImFzc2lnbiIsIkh0dHAiLCJjb21tb24iLCJjdXN0b20iLCJ0b0xvd2VyQ2FzZSIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJ4aHJDbGllbnQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInBhcnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVwbG9hZCIsImNyZWRlbnRpYWxzIiwid2l0aENyZWRlbnRpYWxzIiwic2V0UmVxdWVzdEhlYWRlciIsInJvdyIsIkNsaWVudCIsInJlcUhhbmRsZXJzIiwicG9wIiwicmVzSGFuZGxlcnMiLCJ1bnNoaWZ0Iiwic2VuZFJlcXVlc3QiLCJ1c2UiLCJpbnRlcmNlcHRvcnMiLCJSZXF1ZXN0Iiwib2siLCJFcnJvciIsIlJlc291cmNlIiwiYWN0aW9ucyIsInJlc291cmNlIiwiYWN0aW9uIiwiJGh0dHAiLCJwbHVnaW4iLCJpbnN0YWxsZWQiLCJodHRwIiwiUHJvbWlzZSIsImRlZmluZVByb3BlcnRpZXMiLCIkdXJsIiwiZ2V0IiwiJHJlc291cmNlIiwiJHByb21pc2UiLCJfdGhpcyIsIlJFU09MVkVEIiwiUkVKRUNURUQiLCJhbGwiLCJpdGVyYWJsZSIsInJlc29sdmVyIiwiY291bnQiLCJyYWNlIiwicCQxIiwiVHlwZUVycm9yIiwiY2FsbGVkIiwibm90aWZ5IiwicmVhc29uIiwic2hpZnQiLCJvblJlc29sdmVkIiwib25SZWplY3RlZCIsImNhdGNoIiwicCIsImZpbmFsbHkiLCJpZSIsImRvY3VtZW50TW9kZSIsImVsIiwiZXNjYXBlIiwiaHJlZiIsInBvcnQiLCJob3N0bmFtZSIsInBhdGhuYW1lIiwic2VhcmNoIiwibG9jYXRpb24iLCJjbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJSZXNwb25zZSIsIl9yZWYiLCJibG9iIiwiQmxvYiIsIkNVU1RPTV9IRUFERVJTIiwiWC1SZXF1ZXN0ZWQtV2l0aCIsIkNPTU1PTl9IRUFERVJTIiwiQWNjZXB0IiwiSlNPTl9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJwdXQiLCJwb3N0IiwicGF0Y2giLCJkZWxldGUiLCJzYXZlIiwidXBkYXRlIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiQ0FNQSxTQUFBQSxFQUFBQyxHQUNBLGdCQUFBQyxVQUFBLG1CQUFBQyxRQUFBQSxPQUFBRCxRQUFBRCxJQUNBLGtCQUFBRyxTQUFBQSxPQUFBQyxJQUFBRCxPQUFBSCxHQUNBRCxFQUFBTSxZQUFBTCxLQUNBTSxLQUFBLFdBQUEsWUFVQSxTQUFBQyxHQUFBQyxHQUVBRixLQUFBRyxNQUFBQyxHQUNBSixLQUFBSyxNQUFBQyxPQUNBTixLQUFBTyxXQUVBLElBQUFDLEdBQUFSLElBRUEsS0FDQUUsRUFBQSxTQUFBTyxHQUNBRCxFQUFBRSxRQUFBRCxJQUNBLFNBQUFFLEdBQ0FILEVBQUFJLE9BQUFELEtBRUEsTUFBQUUsR0FDQUwsRUFBQUksT0FBQUMsSUEySkEsUUFBQUMsR0FBQVosRUFBQWEsR0FFQWIsWUFBQWMsSUFDQWhCLEtBQUFRLFFBQUFOLEVBRUFGLEtBQUFRLFFBQUEsR0FBQVEsSUFBQWQsRUFBQWUsS0FBQUYsSUFHQWYsS0FBQWUsUUFBQUEsRUE4REEsUUFBQUcsR0FBQUMsR0FDQUMsR0FBQUQsRUFBQUMsS0FDQUMsR0FBQUYsRUFBQUcsT0FBQUQsUUFBQUYsRUFBQUcsT0FBQUMsT0FHQSxRQUFBQyxHQUFBQyxHQUNBLG1CQUFBQyxVQUFBTCxJQUNBSyxRQUFBRixLQUFBLHVCQUFBQyxHQUlBLFFBQUFFLEdBQUFGLEdBQ0EsbUJBQUFDLFVBQ0FBLFFBQUFDLE1BQUFGLEdBSUEsUUFBQUcsR0FBQUMsRUFBQUMsR0FD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InBsdWcvdnVlLXJlc291cmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiB2dWUtcmVzb3VyY2UgdjAuOS4zXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJlc291cmNlXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsLlZ1ZVJlc291cmNlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIFByb21pc2VzL0ErIHBvbHlmaWxsIHYxLjEuNCAoaHR0cHM6Ly9naXRodWIuY29tL2JyYW1zdGVpbi9wcm9taXMpXG4gICAqL1xuXG4gIHZhciBSRVNPTFZFRCA9IDA7XG4gIHZhciBSRUpFQ1RFRCA9IDE7XG4gIHZhciBQRU5ESU5HID0gMjtcblxuICBmdW5jdGlvbiBQcm9taXNlJDIoZXhlY3V0b3IpIHtcblxuICAgICAgdGhpcy5zdGF0ZSA9IFBFTkRJTkc7XG4gICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kZWZlcnJlZCA9IFtdO1xuXG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgICAgZXhlY3V0b3IoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKHgpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgIHByb21pc2UucmVqZWN0KHIpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHByb21pc2UucmVqZWN0KGUpO1xuICAgICAgfVxuICB9XG5cbiAgUHJvbWlzZSQyLnJlamVjdCA9IGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UkMihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgcmVqZWN0KHIpO1xuICAgICAgfSk7XG4gIH07XG5cbiAgUHJvbWlzZSQyLnJlc29sdmUgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlJDIoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIHJlc29sdmUoeCk7XG4gICAgICB9KTtcbiAgfTtcblxuICBQcm9taXNlJDIuYWxsID0gZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UkMihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgICAgICBpZiAoaXRlcmFibGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlcihpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0geDtcbiAgICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlcmFibGUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgUHJvbWlzZSQyLnJlc29sdmUoaXRlcmFibGVbaV0pLnRoZW4ocmVzb2x2ZXIoaSksIHJlamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gIH07XG5cbiAgUHJvbWlzZSQyLnJhY2UgPSBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UkMihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVyYWJsZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICBQcm9taXNlJDIucmVzb2x2ZShpdGVyYWJsZVtpXSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH1cbiAgICAgIH0pO1xuICB9O1xuXG4gIHZhciBwJDEgPSBQcm9taXNlJDIucHJvdG90eXBlO1xuXG4gIHAkMS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG5cbiAgICAgIGlmIChwcm9taXNlLnN0YXRlID09PSBQRU5ESU5HKSB7XG4gICAgICAgICAgaWYgKHggPT09IHByb21pc2UpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZSBzZXR0bGVkIHdpdGggaXRzZWxmLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciB0aGVuID0geCAmJiB4Wyd0aGVuJ107XG5cbiAgICAgICAgICAgICAgaWYgKHggIT09IG51bGwgJiYgdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICB0aGVuLmNhbGwoeCwgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoeCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UucmVqZWN0KHIpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICBwcm9taXNlLnJlamVjdChlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHJvbWlzZS5zdGF0ZSA9IFJFU09MVkVEO1xuICAgICAgICAgIHByb21pc2UudmFsdWUgPSB4O1xuICAgICAgICAgIHByb21pc2Uubm90aWZ5KCk7XG4gICAgICB9XG4gIH07XG5cbiAgcCQxLnJlamVjdCA9IGZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgICAgIHZhciBwcm9taXNlID0gdGhpcztcblxuICAgICAgaWYgKHByb21pc2Uuc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICAgICAgICBpZiAocmVhc29uID09PSBwcm9taXNlKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2Ugc2V0dGxlZCB3aXRoIGl0c2VsZi4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwcm9taXNlLnN0YXRlID0gUkVKRUNURUQ7XG4gICAgICAgICAgcHJvbWlzZS52YWx1ZSA9IHJlYXNvbjtcbiAgICAgICAgICBwcm9taXNlLm5vdGlmeSgpO1xuICAgICAgfVxuICB9O1xuXG4gIHAkMS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG5cbiAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAocHJvbWlzZS5zdGF0ZSAhPT0gUEVORElORykge1xuICAgICAgICAgICAgICB3aGlsZSAocHJvbWlzZS5kZWZlcnJlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9IHByb21pc2UuZGVmZXJyZWQuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICBvblJlc29sdmVkID0gZGVmZXJyZWRbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgb25SZWplY3RlZCA9IGRlZmVycmVkWzFdLFxuICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUgPSBkZWZlcnJlZFsyXSxcbiAgICAgICAgICAgICAgICAgICAgICByZWplY3QgPSBkZWZlcnJlZFszXTtcblxuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvbWlzZS5zdGF0ZSA9PT0gUkVTT0xWRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvblJlc29sdmVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9uUmVzb2x2ZWQuY2FsbCh1bmRlZmluZWQsIHByb21pc2UudmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocHJvbWlzZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb21pc2Uuc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb25SZWplY3RlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvblJlamVjdGVkLmNhbGwodW5kZWZpbmVkLCBwcm9taXNlLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocHJvbWlzZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gIH07XG5cbiAgcCQxLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uUmVzb2x2ZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBwcm9taXNlID0gdGhpcztcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlJDIoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIHByb21pc2UuZGVmZXJyZWQucHVzaChbb25SZXNvbHZlZCwgb25SZWplY3RlZCwgcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICAgICAgcHJvbWlzZS5ub3RpZnkoKTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIHAkMS5jYXRjaCA9IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gIH07XG5cbiAgdmFyIFByb21pc2VPYmogPSB3aW5kb3cuUHJvbWlzZSB8fCBQcm9taXNlJDI7XG5cbiAgZnVuY3Rpb24gUHJvbWlzZSQxKGV4ZWN1dG9yLCBjb250ZXh0KSB7XG5cbiAgICAgIGlmIChleGVjdXRvciBpbnN0YW5jZW9mIFByb21pc2VPYmopIHtcbiAgICAgICAgICB0aGlzLnByb21pc2UgPSBleGVjdXRvcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2VPYmooZXhlY3V0b3IuYmluZChjb250ZXh0KSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBQcm9taXNlJDEuYWxsID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UkMShQcm9taXNlT2JqLmFsbChpdGVyYWJsZSksIGNvbnRleHQpO1xuICB9O1xuXG4gIFByb21pc2UkMS5yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UkMShQcm9taXNlT2JqLnJlc29sdmUodmFsdWUpLCBjb250ZXh0KTtcbiAgfTtcblxuICBQcm9taXNlJDEucmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbiwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoUHJvbWlzZU9iai5yZWplY3QocmVhc29uKSwgY29udGV4dCk7XG4gIH07XG5cbiAgUHJvbWlzZSQxLnJhY2UgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSQxKFByb21pc2VPYmoucmFjZShpdGVyYWJsZSksIGNvbnRleHQpO1xuICB9O1xuXG4gIHZhciBwID0gUHJvbWlzZSQxLnByb3RvdHlwZTtcblxuICBwLmJpbmQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHAudGhlbiA9IGZ1bmN0aW9uIChmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG5cbiAgICAgIGlmIChmdWxmaWxsZWQgJiYgZnVsZmlsbGVkLmJpbmQgJiYgdGhpcy5jb250ZXh0KSB7XG4gICAgICAgICAgZnVsZmlsbGVkID0gZnVsZmlsbGVkLmJpbmQodGhpcy5jb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlamVjdGVkICYmIHJlamVjdGVkLmJpbmQgJiYgdGhpcy5jb250ZXh0KSB7XG4gICAgICAgICAgcmVqZWN0ZWQgPSByZWplY3RlZC5iaW5kKHRoaXMuY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSQxKHRoaXMucHJvbWlzZS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpLCB0aGlzLmNvbnRleHQpO1xuICB9O1xuXG4gIHAuY2F0Y2ggPSBmdW5jdGlvbiAocmVqZWN0ZWQpIHtcblxuICAgICAgaWYgKHJlamVjdGVkICYmIHJlamVjdGVkLmJpbmQgJiYgdGhpcy5jb250ZXh0KSB7XG4gICAgICAgICAgcmVqZWN0ZWQgPSByZWplY3RlZC5iaW5kKHRoaXMuY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSQxKHRoaXMucHJvbWlzZS5jYXRjaChyZWplY3RlZCksIHRoaXMuY29udGV4dCk7XG4gIH07XG5cbiAgcC5maW5hbGx5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cbiAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzKTtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzKTtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZU9iai5yZWplY3QocmVhc29uKTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIHZhciBkZWJ1ZyA9IGZhbHNlO1xuICB2YXIgdXRpbCA9IHt9O1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgZnVuY3Rpb24gVXRpbCAoVnVlKSB7XG4gICAgICB1dGlsID0gVnVlLnV0aWw7XG4gICAgICBkZWJ1ZyA9IFZ1ZS5jb25maWcuZGVidWcgfHwgIVZ1ZS5jb25maWcuc2lsZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgZGVidWcpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1tWdWVSZXNvdXJjZSB3YXJuXTogJyArIG1zZyk7XG4gICAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlcnJvcihtc2cpIHtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBuZXh0VGljayhjYiwgY3R4KSB7XG4gICAgICByZXR1cm4gdXRpbC5uZXh0VGljayhjYiwgY3R4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbiAgfVxuXG4gIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICBmdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWwpIHtcbiAgICAgIHJldHVybiB2YWwgPT09IHRydWUgfHwgdmFsID09PSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JztcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PSBPYmplY3QucHJvdG90eXBlO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNGb3JtRGF0YShvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnICYmIG9iaiBpbnN0YW5jZW9mIEZvcm1EYXRhO1xuICB9XG5cbiAgZnVuY3Rpb24gd2hlbih2YWx1ZSwgZnVsZmlsbGVkLCByZWplY3RlZCkge1xuXG4gICAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UkMS5yZXNvbHZlKHZhbHVlKTtcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBvcHRpb25zKGZuLCBvYmosIG9wdHMpIHtcblxuICAgICAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdHMpKSB7XG4gICAgICAgICAgb3B0cyA9IG9wdHMuY2FsbChvYmopO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2UoZm4uYmluZCh7ICR2bTogb2JqLCAkb3B0aW9uczogb3B0cyB9KSwgZm4sIHsgJG9wdGlvbnM6IG9wdHMgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBlYWNoKG9iaiwgaXRlcmF0b3IpIHtcblxuICAgICAgdmFyIGksIGtleTtcblxuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInKSB7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKG9ialtpXSwgb2JqW2ldLCBpKTtcbiAgICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9iaikpIHtcbiAgICAgICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKG9ialtrZXldLCBvYmpba2V5XSwga2V5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IF9hc3NpZ247XG5cbiAgZnVuY3Rpb24gbWVyZ2UodGFyZ2V0KSB7XG5cbiAgICAgIHZhciBhcmdzID0gYXJyYXkuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICAgIF9tZXJnZSh0YXJnZXQsIHNvdXJjZSwgdHJ1ZSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRzKHRhcmdldCkge1xuXG4gICAgICB2YXIgYXJncyA9IGFycmF5LnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2UpIHtcblxuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgaWYgKHRhcmdldFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hc3NpZ24odGFyZ2V0KSB7XG5cbiAgICAgIHZhciBhcmdzID0gYXJyYXkuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICAgIF9tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9tZXJnZSh0YXJnZXQsIHNvdXJjZSwgZGVlcCkge1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmIChkZWVwICYmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSB8fCBpc0FycmF5KHNvdXJjZVtrZXldKSkpIHtcbiAgICAgICAgICAgICAgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pICYmICFpc1BsYWluT2JqZWN0KHRhcmdldFtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB7fTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoaXNBcnJheShzb3VyY2Vba2V5XSkgJiYgIWlzQXJyYXkodGFyZ2V0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IFtdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF9tZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIGRlZXApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvb3QgKG9wdGlvbnMsIG5leHQpIHtcblxuICAgICAgdmFyIHVybCA9IG5leHQob3B0aW9ucyk7XG5cbiAgICAgIGlmIChpc1N0cmluZyhvcHRpb25zLnJvb3QpICYmICF1cmwubWF0Y2goL14oaHR0cHM/Oik/XFwvLykpIHtcbiAgICAgICAgICB1cmwgPSBvcHRpb25zLnJvb3QgKyAnLycgKyB1cmw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1cmw7XG4gIH1cblxuICBmdW5jdGlvbiBxdWVyeSAob3B0aW9ucywgbmV4dCkge1xuXG4gICAgICB2YXIgdXJsUGFyYW1zID0gT2JqZWN0LmtleXMoVXJsLm9wdGlvbnMucGFyYW1zKSxcbiAgICAgICAgICBxdWVyeSA9IHt9LFxuICAgICAgICAgIHVybCA9IG5leHQob3B0aW9ucyk7XG5cbiAgICAgIGVhY2gob3B0aW9ucy5wYXJhbXMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgaWYgKHVybFBhcmFtcy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgIHF1ZXJ5W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcXVlcnkgPSBVcmwucGFyYW1zKHF1ZXJ5KTtcblxuICAgICAgaWYgKHF1ZXJ5KSB7XG4gICAgICAgICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09IC0xID8gJz8nIDogJyYnKSArIHF1ZXJ5O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIFVSTCBUZW1wbGF0ZSB2Mi4wLjYgKGh0dHBzOi8vZ2l0aHViLmNvbS9icmFtc3RlaW4vdXJsLXRlbXBsYXRlKVxuICAgKi9cblxuICBmdW5jdGlvbiBleHBhbmQodXJsLCBwYXJhbXMsIHZhcmlhYmxlcykge1xuXG4gICAgICB2YXIgdG1wbCA9IHBhcnNlKHVybCksXG4gICAgICAgICAgZXhwYW5kZWQgPSB0bXBsLmV4cGFuZChwYXJhbXMpO1xuXG4gICAgICBpZiAodmFyaWFibGVzKSB7XG4gICAgICAgICAgdmFyaWFibGVzLnB1c2guYXBwbHkodmFyaWFibGVzLCB0bXBsLnZhcnMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXhwYW5kZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZSh0ZW1wbGF0ZSkge1xuXG4gICAgICB2YXIgb3BlcmF0b3JzID0gWycrJywgJyMnLCAnLicsICcvJywgJzsnLCAnPycsICcmJ10sXG4gICAgICAgICAgdmFyaWFibGVzID0gW107XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFyczogdmFyaWFibGVzLFxuICAgICAgICAgIGV4cGFuZDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoL1xceyhbXlxce1xcfV0rKVxcfXwoW15cXHtcXH1dKykvZywgZnVuY3Rpb24gKF8sIGV4cHJlc3Npb24sIGxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChleHByZXNzaW9uKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICB2YXIgb3BlcmF0b3IgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVyYXRvcnMuaW5kZXhPZihleHByZXNzaW9uLmNoYXJBdCgwKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yID0gZXhwcmVzc2lvbi5jaGFyQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnN1YnN0cigxKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLnNwbGl0KC8sL2cpLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSAvKFteOlxcKl0qKSg/OjooXFxkKyl8KFxcKikpPy8uZXhlYyh2YXJpYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoLmFwcGx5KHZhbHVlcywgZ2V0VmFsdWVzKGNvbnRleHQsIG9wZXJhdG9yLCB0bXBbMV0sIHRtcFsyXSB8fCB0bXBbM10pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzLnB1c2godG1wWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVyYXRvciAmJiBvcGVyYXRvciAhPT0gJysnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcGFyYXRvciA9ICcsJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlcmF0b3IgPT09ICc/Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yID0gJyYnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdG9yICE9PSAnIycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZXMubGVuZ3RoICE9PSAwID8gb3BlcmF0b3IgOiAnJykgKyB2YWx1ZXMuam9pbihzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXMuam9pbignLCcpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZVJlc2VydmVkKGxpdGVyYWwpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVzKGNvbnRleHQsIG9wZXJhdG9yLCBrZXksIG1vZGlmaWVyKSB7XG5cbiAgICAgIHZhciB2YWx1ZSA9IGNvbnRleHRba2V5XSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkgJiYgdmFsdWUgIT09ICcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgICAgICAgaWYgKG1vZGlmaWVyICYmIG1vZGlmaWVyICE9PSAnKicpIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIHBhcnNlSW50KG1vZGlmaWVyLCAxMCkpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlVmFsdWUob3BlcmF0b3IsIHZhbHVlLCBpc0tleU9wZXJhdG9yKG9wZXJhdG9yKSA/IGtleSA6IG51bGwpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAobW9kaWZpZXIgPT09ICcqJykge1xuICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWUuZmlsdGVyKGlzRGVmaW5lZCkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlVmFsdWUob3BlcmF0b3IsIHZhbHVlLCBpc0tleU9wZXJhdG9yKG9wZXJhdG9yKSA/IGtleSA6IG51bGwpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModmFsdWUpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZVtrXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZVZhbHVlKG9wZXJhdG9yLCB2YWx1ZVtrXSwgaykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdG1wID0gW107XG5cbiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmZpbHRlcihpc0RlZmluZWQpLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRtcC5wdXNoKGVuY29kZVZhbHVlKG9wZXJhdG9yLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlW2tdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGspKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcC5wdXNoKGVuY29kZVZhbHVlKG9wZXJhdG9yLCB2YWx1ZVtrXS50b1N0cmluZygpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKGlzS2V5T3BlcmF0b3Iob3BlcmF0b3IpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyB0bXAuam9pbignLCcpKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG1wLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRtcC5qb2luKCcsJykpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAob3BlcmF0b3IgPT09ICc7Jykge1xuICAgICAgICAgICAgICByZXN1bHQucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycgJiYgKG9wZXJhdG9yID09PSAnJicgfHwgb3BlcmF0b3IgPT09ICc/JykpIHtcbiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNLZXlPcGVyYXRvcihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIG9wZXJhdG9yID09PSAnOycgfHwgb3BlcmF0b3IgPT09ICcmJyB8fCBvcGVyYXRvciA9PT0gJz8nO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlVmFsdWUob3BlcmF0b3IsIHZhbHVlLCBrZXkpIHtcblxuICAgICAgdmFsdWUgPSBvcGVyYXRvciA9PT0gJysnIHx8IG9wZXJhdG9yID09PSAnIycgPyBlbmNvZGVSZXNlcnZlZCh2YWx1ZSkgOiBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZVJlc2VydmVkKHN0cikge1xuICAgICAgcmV0dXJuIHN0ci5zcGxpdCgvKCVbMC05QS1GYS1mXXsyfSkvZykubWFwKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICAgICAgaWYgKCEvJVswLTlBLUZhLWZdLy50ZXN0KHBhcnQpKSB7XG4gICAgICAgICAgICAgIHBhcnQgPSBlbmNvZGVVUkkocGFydCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwYXJ0O1xuICAgICAgfSkuam9pbignJyk7XG4gIH1cblxuICBmdW5jdGlvbiB0ZW1wbGF0ZSAob3B0aW9ucykge1xuXG4gICAgICB2YXIgdmFyaWFibGVzID0gW10sXG4gICAgICAgICAgdXJsID0gZXhwYW5kKG9wdGlvbnMudXJsLCBvcHRpb25zLnBhcmFtcywgdmFyaWFibGVzKTtcblxuICAgICAgdmFyaWFibGVzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLnBhcmFtc1trZXldO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB1cmw7XG4gIH1cblxuICAvKipcbiAgICogU2VydmljZSBmb3IgVVJMIHRlbXBsYXRpbmcuXG4gICAqL1xuXG4gIHZhciBpZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXG4gIGZ1bmN0aW9uIFVybCh1cmwsIHBhcmFtcykge1xuXG4gICAgICB2YXIgc2VsZiA9IHRoaXMgfHwge30sXG4gICAgICAgICAgb3B0aW9ucyA9IHVybCxcbiAgICAgICAgICB0cmFuc2Zvcm07XG5cbiAgICAgIGlmIChpc1N0cmluZyh1cmwpKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IHsgdXJsOiB1cmwsIHBhcmFtczogcGFyYW1zIH07XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMgPSBtZXJnZSh7fSwgVXJsLm9wdGlvbnMsIHNlbGYuJG9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICBVcmwudHJhbnNmb3Jtcy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgdHJhbnNmb3JtID0gZmFjdG9yeShoYW5kbGVyLCB0cmFuc2Zvcm0sIHNlbGYuJHZtKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdHJhbnNmb3JtKG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVybCBvcHRpb25zLlxuICAgKi9cblxuICBVcmwub3B0aW9ucyA9IHtcbiAgICAgIHVybDogJycsXG4gICAgICByb290OiBudWxsLFxuICAgICAgcGFyYW1zOiB7fVxuICB9O1xuXG4gIC8qKlxuICAgKiBVcmwgdHJhbnNmb3Jtcy5cbiAgICovXG5cbiAgVXJsLnRyYW5zZm9ybXMgPSBbdGVtcGxhdGUsIHF1ZXJ5LCByb290XTtcblxuICAvKipcbiAgICogRW5jb2RlcyBhIFVybCBwYXJhbWV0ZXIgc3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gICAqL1xuXG4gIFVybC5wYXJhbXMgPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICAgIHZhciBwYXJhbXMgPSBbXSxcbiAgICAgICAgICBlc2NhcGUgPSBlbmNvZGVVUklDb21wb25lbnQ7XG5cbiAgICAgIHBhcmFtcy5hZGQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnB1c2goZXNjYXBlKGtleSkgKyAnPScgKyBlc2NhcGUodmFsdWUpKTtcbiAgICAgIH07XG5cbiAgICAgIHNlcmlhbGl6ZShwYXJhbXMsIG9iaik7XG5cbiAgICAgIHJldHVybiBwYXJhbXMuam9pbignJicpLnJlcGxhY2UoLyUyMC9nLCAnKycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQYXJzZSBhIFVSTCBhbmQgcmV0dXJuIGl0cyBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAqL1xuXG4gIFVybC5wYXJzZSA9IGZ1bmN0aW9uICh1cmwpIHtcblxuICAgICAgaWYgKGllKSB7XG4gICAgICAgICAgZWwuaHJlZiA9IHVybDtcbiAgICAgICAgICB1cmwgPSBlbC5ocmVmO1xuICAgICAgfVxuXG4gICAgICBlbC5ocmVmID0gdXJsO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IGVsLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IGVsLnByb3RvY29sID8gZWwucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBwb3J0OiBlbC5wb3J0LFxuICAgICAgICAgIGhvc3Q6IGVsLmhvc3QsXG4gICAgICAgICAgaG9zdG5hbWU6IGVsLmhvc3RuYW1lLFxuICAgICAgICAgIHBhdGhuYW1lOiBlbC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyA/IGVsLnBhdGhuYW1lIDogJy8nICsgZWwucGF0aG5hbWUsXG4gICAgICAgICAgc2VhcmNoOiBlbC5zZWFyY2ggPyBlbC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IGVsLmhhc2ggPyBlbC5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJydcbiAgICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gZmFjdG9yeShoYW5kbGVyLCBuZXh0LCB2bSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZXIuY2FsbCh2bSwgb3B0aW9ucywgbmV4dCk7XG4gICAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VyaWFsaXplKHBhcmFtcywgb2JqLCBzY29wZSkge1xuXG4gICAgICB2YXIgYXJyYXkgPSBpc0FycmF5KG9iaiksXG4gICAgICAgICAgcGxhaW4gPSBpc1BsYWluT2JqZWN0KG9iaiksXG4gICAgICAgICAgaGFzaDtcblxuICAgICAgZWFjaChvYmosIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG5cbiAgICAgICAgICBoYXNoID0gaXNPYmplY3QodmFsdWUpIHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHNjb3BlKSB7XG4gICAgICAgICAgICAgIGtleSA9IHNjb3BlICsgJ1snICsgKHBsYWluIHx8IGhhc2ggPyBrZXkgOiAnJykgKyAnXSc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFzY29wZSAmJiBhcnJheSkge1xuICAgICAgICAgICAgICBwYXJhbXMuYWRkKHZhbHVlLm5hbWUsIHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc2gpIHtcbiAgICAgICAgICAgICAgc2VyaWFsaXplKHBhcmFtcywgdmFsdWUsIGtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyYW1zLmFkZChrZXksIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHhkckNsaWVudCAocmVxdWVzdCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUpIHtcblxuICAgICAgICAgIHZhciB4ZHIgPSBuZXcgWERvbWFpblJlcXVlc3QoKSxcbiAgICAgICAgICAgICAgaGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IHJlcXVlc3QucmVzcG9uZFdpdGgoeGRyLnJlc3BvbnNlVGV4dCwge1xuICAgICAgICAgICAgICAgICAgc3RhdHVzOiB4ZHIuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogeGRyLnN0YXR1c1RleHRcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJlcXVlc3QuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB4ZHIuYWJvcnQoKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgeGRyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QuZ2V0VXJsKCksIHRydWUpO1xuICAgICAgICAgIHhkci50aW1lb3V0ID0gMDtcbiAgICAgICAgICB4ZHIub25sb2FkID0gaGFuZGxlcjtcbiAgICAgICAgICB4ZHIub25lcnJvciA9IGhhbmRsZXI7XG4gICAgICAgICAgeGRyLm9udGltZW91dCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICAgIHhkci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgeGRyLnNlbmQocmVxdWVzdC5nZXRCb2R5KCkpO1xuICAgICAgfSk7XG4gIH1cblxuICB2YXIgT1JJR0lOX1VSTCA9IFVybC5wYXJzZShsb2NhdGlvbi5ocmVmKTtcbiAgdmFyIFNVUFBPUlRTX0NPUlMgPSAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICBmdW5jdGlvbiBjb3JzIChyZXF1ZXN0LCBuZXh0KSB7XG5cbiAgICAgIGlmICghaXNCb29sZWFuKHJlcXVlc3QuY3Jvc3NPcmlnaW4pICYmIGNyb3NzT3JpZ2luKHJlcXVlc3QpKSB7XG4gICAgICAgICAgcmVxdWVzdC5jcm9zc09yaWdpbiA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyb3NzT3JpZ2luKSB7XG5cbiAgICAgICAgICBpZiAoIVNVUFBPUlRTX0NPUlMpIHtcbiAgICAgICAgICAgICAgcmVxdWVzdC5jbGllbnQgPSB4ZHJDbGllbnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3QuZW11bGF0ZUhUVFA7XG4gICAgICB9XG5cbiAgICAgIG5leHQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyb3NzT3JpZ2luKHJlcXVlc3QpIHtcblxuICAgICAgdmFyIHJlcXVlc3RVcmwgPSBVcmwucGFyc2UoVXJsKHJlcXVlc3QpKTtcblxuICAgICAgcmV0dXJuIHJlcXVlc3RVcmwucHJvdG9jb2wgIT09IE9SSUdJTl9VUkwucHJvdG9jb2wgfHwgcmVxdWVzdFVybC5ob3N0ICE9PSBPUklHSU5fVVJMLmhvc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBib2R5IChyZXF1ZXN0LCBuZXh0KSB7XG5cbiAgICAgIGlmIChyZXF1ZXN0LmVtdWxhdGVKU09OICYmIGlzUGxhaW5PYmplY3QocmVxdWVzdC5ib2R5KSkge1xuICAgICAgICAgIHJlcXVlc3QuYm9keSA9IFVybC5wYXJhbXMocmVxdWVzdC5ib2R5KTtcbiAgICAgICAgICByZXF1ZXN0LmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Zvcm1EYXRhKHJlcXVlc3QuYm9keSkpIHtcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdC5oZWFkZXJzWydDb250ZW50LVR5cGUnXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUGxhaW5PYmplY3QocmVxdWVzdC5ib2R5KSkge1xuICAgICAgICAgIHJlcXVlc3QuYm9keSA9IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QuYm9keSk7XG4gICAgICB9XG5cbiAgICAgIG5leHQoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSByZXNwb25zZS5oZWFkZXJzWydDb250ZW50LVR5cGUnXTtcblxuICAgICAgICAgIGlmIChpc1N0cmluZyhjb250ZW50VHlwZSkgJiYgY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEgPSByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGpzb25wQ2xpZW50IChyZXF1ZXN0KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSkge1xuXG4gICAgICAgICAgdmFyIG5hbWUgPSByZXF1ZXN0Lmpzb25wIHx8ICdjYWxsYmFjaycsXG4gICAgICAgICAgICAgIGNhbGxiYWNrID0gJ19qc29ucCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiksXG4gICAgICAgICAgICAgIGJvZHkgPSBudWxsLFxuICAgICAgICAgICAgICBoYW5kbGVyLFxuICAgICAgICAgICAgICBzY3JpcHQ7XG5cbiAgICAgICAgICBoYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9IDA7XG5cbiAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyAmJiBib2R5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBzdGF0dXMgPSAyMDA7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgICAgICAgc3RhdHVzID0gNDA0O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3BvbmRXaXRoKGJvZHksIHsgc3RhdHVzOiBzdGF0dXMgfSkpO1xuXG4gICAgICAgICAgICAgIGRlbGV0ZSB3aW5kb3dbY2FsbGJhY2tdO1xuICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJlcXVlc3QucGFyYW1zW25hbWVdID0gY2FsbGJhY2s7XG5cbiAgICAgICAgICB3aW5kb3dbY2FsbGJhY2tdID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgc2NyaXB0LnNyYyA9IHJlcXVlc3QuZ2V0VXJsKCk7XG4gICAgICAgICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgICAgIHNjcmlwdC5vbmxvYWQgPSBoYW5kbGVyO1xuICAgICAgICAgIHNjcmlwdC5vbmVycm9yID0gaGFuZGxlcjtcblxuICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24ganNvbnAgKHJlcXVlc3QsIG5leHQpIHtcblxuICAgICAgaWYgKHJlcXVlc3QubWV0aG9kID09ICdKU09OUCcpIHtcbiAgICAgICAgICByZXF1ZXN0LmNsaWVudCA9IGpzb25wQ2xpZW50O1xuICAgICAgfVxuXG4gICAgICBuZXh0KGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgaWYgKHJlcXVlc3QubWV0aG9kID09ICdKU09OUCcpIHtcbiAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZm9yZSAocmVxdWVzdCwgbmV4dCkge1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbihyZXF1ZXN0LmJlZm9yZSkpIHtcbiAgICAgICAgICByZXF1ZXN0LmJlZm9yZS5jYWxsKHRoaXMsIHJlcXVlc3QpO1xuICAgICAgfVxuXG4gICAgICBuZXh0KCk7XG4gIH1cblxuICAvKipcbiAgICogSFRUUCBtZXRob2Qgb3ZlcnJpZGUgSW50ZXJjZXB0b3IuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIG1ldGhvZCAocmVxdWVzdCwgbmV4dCkge1xuXG4gICAgICBpZiAocmVxdWVzdC5lbXVsYXRlSFRUUCAmJiAvXihQVVR8UEFUQ0h8REVMRVRFKSQvaS50ZXN0KHJlcXVlc3QubWV0aG9kKSkge1xuICAgICAgICAgIHJlcXVlc3QuaGVhZGVyc1snWC1IVFRQLU1ldGhvZC1PdmVycmlkZSddID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgICAgICAgcmVxdWVzdC5tZXRob2QgPSAnUE9TVCc7XG4gICAgICB9XG5cbiAgICAgIG5leHQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhlYWRlciAocmVxdWVzdCwgbmV4dCkge1xuXG4gICAgICByZXF1ZXN0Lm1ldGhvZCA9IHJlcXVlc3QubWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgICByZXF1ZXN0LmhlYWRlcnMgPSBhc3NpZ24oe30sIEh0dHAuaGVhZGVycy5jb21tb24sICFyZXF1ZXN0LmNyb3NzT3JpZ2luID8gSHR0cC5oZWFkZXJzLmN1c3RvbSA6IHt9LCBIdHRwLmhlYWRlcnNbcmVxdWVzdC5tZXRob2QudG9Mb3dlckNhc2UoKV0sIHJlcXVlc3QuaGVhZGVycyk7XG5cbiAgICAgIG5leHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaW1lb3V0IEludGVyY2VwdG9yLlxuICAgKi9cblxuICBmdW5jdGlvbiB0aW1lb3V0IChyZXF1ZXN0LCBuZXh0KSB7XG5cbiAgICAgIHZhciB0aW1lb3V0O1xuXG4gICAgICBpZiAocmVxdWVzdC50aW1lb3V0KSB7XG4gICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgICAgfSwgcmVxdWVzdC50aW1lb3V0KTtcbiAgICAgIH1cblxuICAgICAgbmV4dChmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24geGhyQ2xpZW50IChyZXF1ZXN0KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSkge1xuXG4gICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxuICAgICAgICAgICAgICBoYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gcmVxdWVzdC5yZXNwb25kV2l0aCgncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQsIHtcbiAgICAgICAgICAgICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHhoci5zdGF0dXMsIC8vIElFOSBzdGF0dXMgYnVnXG4gICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogdHJpbSh4aHIuc3RhdHVzVGV4dCksXG4gICAgICAgICAgICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmVxdWVzdC5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHhoci5hYm9ydCgpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC5nZXRVcmwoKSwgdHJ1ZSk7XG4gICAgICAgICAgeGhyLnRpbWVvdXQgPSAwO1xuICAgICAgICAgIHhoci5vbmxvYWQgPSBoYW5kbGVyO1xuICAgICAgICAgIHhoci5vbmVycm9yID0gaGFuZGxlcjtcblxuICAgICAgICAgIGlmIChyZXF1ZXN0LnByb2dyZXNzKSB7XG4gICAgICAgICAgICAgIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgICAgICAgICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHJlcXVlc3QucHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eKFBPU1R8UFVUKSQvaS50ZXN0KHJlcXVlc3QubWV0aG9kKSkge1xuICAgICAgICAgICAgICAgICAgeGhyLnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHJlcXVlc3QucHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWFjaChyZXF1ZXN0LmhlYWRlcnMgfHwge30sIGZ1bmN0aW9uICh2YWx1ZSwgaGVhZGVyKSB7XG4gICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlciwgdmFsdWUpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgeGhyLnNlbmQocmVxdWVzdC5nZXRCb2R5KCkpO1xuICAgICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoc3RyKSB7XG5cbiAgICAgIHZhciBoZWFkZXJzID0ge30sXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBpO1xuXG4gICAgICBlYWNoKHRyaW0oc3RyKS5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIChyb3cpIHtcblxuICAgICAgICAgIGkgPSByb3cuaW5kZXhPZignOicpO1xuICAgICAgICAgIG5hbWUgPSB0cmltKHJvdy5zbGljZSgwLCBpKSk7XG4gICAgICAgICAgdmFsdWUgPSB0cmltKHJvdy5zbGljZShpICsgMSkpO1xuXG4gICAgICAgICAgaWYgKGhlYWRlcnNbbmFtZV0pIHtcblxuICAgICAgICAgICAgICBpZiAoaXNBcnJheShoZWFkZXJzW25hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgaGVhZGVyc1tuYW1lXS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGhlYWRlcnNbbmFtZV0gPSBbaGVhZGVyc1tuYW1lXSwgdmFsdWVdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICBoZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBoZWFkZXJzO1xuICB9XG5cbiAgZnVuY3Rpb24gQ2xpZW50IChjb250ZXh0KSB7XG5cbiAgICAgIHZhciByZXFIYW5kbGVycyA9IFtzZW5kUmVxdWVzdF0sXG4gICAgICAgICAgcmVzSGFuZGxlcnMgPSBbXSxcbiAgICAgICAgICBoYW5kbGVyO1xuXG4gICAgICBpZiAoIWlzT2JqZWN0KGNvbnRleHQpKSB7XG4gICAgICAgICAgY29udGV4dCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIENsaWVudChyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUpIHtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiBleGVjKCkge1xuXG4gICAgICAgICAgICAgICAgICBoYW5kbGVyID0gcmVxSGFuZGxlcnMucG9wKCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5jYWxsKGNvbnRleHQsIHJlcXVlc3QsIG5leHQpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIGludGVyY2VwdG9yIG9mIHR5cGUgJyArIHR5cGVvZiBoYW5kbGVyICsgJywgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gbmV4dChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihyZXNwb25zZSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgIHJlc0hhbmRsZXJzLnVuc2hpZnQocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChyZXNwb25zZSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgIHJlc0hhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB3aGVuKHJlc3BvbnNlLCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmNhbGwoY29udGV4dCwgcmVzcG9uc2UpIHx8IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgIHdoZW4ocmVzcG9uc2UsIHJlc29sdmUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBleGVjKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBleGVjKCk7XG4gICAgICAgICAgfSwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIENsaWVudC51c2UgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgIHJlcUhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ2xpZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VuZFJlcXVlc3QocmVxdWVzdCwgcmVzb2x2ZSkge1xuXG4gICAgICB2YXIgY2xpZW50ID0gcmVxdWVzdC5jbGllbnQgfHwgeGhyQ2xpZW50O1xuXG4gICAgICByZXNvbHZlKGNsaWVudChyZXF1ZXN0KSk7XG4gIH1cblxuICB2YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBIVFRQIFJlc3BvbnNlLlxuICAgKi9cblxuICB2YXIgUmVzcG9uc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBSZXNwb25zZShib2R5LCBfcmVmKSB7XG4gICAgICAgICAgdmFyIHVybCA9IF9yZWYudXJsO1xuICAgICAgICAgIHZhciBoZWFkZXJzID0gX3JlZi5oZWFkZXJzO1xuICAgICAgICAgIHZhciBzdGF0dXMgPSBfcmVmLnN0YXR1cztcbiAgICAgICAgICB2YXIgc3RhdHVzVGV4dCA9IF9yZWYuc3RhdHVzVGV4dDtcbiAgICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBSZXNwb25zZSk7XG5cblxuICAgICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycyB8fCB7fTtcbiAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cyB8fCAwO1xuICAgICAgICAgIHRoaXMuc3RhdHVzVGV4dCA9IHN0YXR1c1RleHQgfHwgJyc7XG4gICAgICAgICAgdGhpcy5vayA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICAgICAgfVxuXG4gICAgICBSZXNwb25zZS5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uIHRleHQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYm9keTtcbiAgICAgIH07XG5cbiAgICAgIFJlc3BvbnNlLnByb3RvdHlwZS5ibG9iID0gZnVuY3Rpb24gYmxvYigpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEJsb2IoW3RoaXMuYm9keV0pO1xuICAgICAgfTtcblxuICAgICAgUmVzcG9uc2UucHJvdG90eXBlLmpzb24gPSBmdW5jdGlvbiBqc29uKCkge1xuICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuYm9keSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gUmVzcG9uc2U7XG4gIH0oKTtcblxuICB2YXIgUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIFJlcXVlc3Qob3B0aW9ucykge1xuICAgICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFJlcXVlc3QpO1xuXG5cbiAgICAgICAgICB0aGlzLm1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAgIHRoaXMuYm9keSA9IG51bGw7XG4gICAgICAgICAgdGhpcy5wYXJhbXMgPSB7fTtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMgPSB7fTtcblxuICAgICAgICAgIGFzc2lnbih0aGlzLCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgUmVxdWVzdC5wcm90b3R5cGUuZ2V0VXJsID0gZnVuY3Rpb24gZ2V0VXJsKCkge1xuICAgICAgICAgIHJldHVybiBVcmwodGhpcyk7XG4gICAgICB9O1xuXG4gICAgICBSZXF1ZXN0LnByb3RvdHlwZS5nZXRCb2R5ID0gZnVuY3Rpb24gZ2V0Qm9keSgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ib2R5O1xuICAgICAgfTtcblxuICAgICAgUmVxdWVzdC5wcm90b3R5cGUucmVzcG9uZFdpdGggPSBmdW5jdGlvbiByZXNwb25kV2l0aChib2R5LCBvcHRpb25zKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShib2R5LCBhc3NpZ24ob3B0aW9ucyB8fCB7fSwgeyB1cmw6IHRoaXMuZ2V0VXJsKCkgfSkpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFJlcXVlc3Q7XG4gIH0oKTtcblxuICAvKipcbiAgICogU2VydmljZSBmb3Igc2VuZGluZyBuZXR3b3JrIHJlcXVlc3RzLlxuICAgKi9cblxuICB2YXIgQ1VTVE9NX0hFQURFUlMgPSB7ICdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0JyB9O1xuICB2YXIgQ09NTU9OX0hFQURFUlMgPSB7ICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJyB9O1xuICB2YXIgSlNPTl9DT05URU5UX1RZUEUgPSB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04JyB9O1xuXG4gIGZ1bmN0aW9uIEh0dHAob3B0aW9ucykge1xuXG4gICAgICB2YXIgc2VsZiA9IHRoaXMgfHwge30sXG4gICAgICAgICAgY2xpZW50ID0gQ2xpZW50KHNlbGYuJHZtKTtcblxuICAgICAgZGVmYXVsdHMob3B0aW9ucyB8fCB7fSwgc2VsZi4kb3B0aW9ucywgSHR0cC5vcHRpb25zKTtcblxuICAgICAgSHR0cC5pbnRlcmNlcHRvcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgIGNsaWVudC51c2UoaGFuZGxlcik7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGNsaWVudChuZXcgUmVxdWVzdChvcHRpb25zKSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgIHJldHVybiByZXNwb25zZS5vayA/IHJlc3BvbnNlIDogUHJvbWlzZSQxLnJlamVjdChyZXNwb25zZSk7XG4gICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgIGVycm9yKHJlc3BvbnNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZSQxLnJlamVjdChyZXNwb25zZSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIEh0dHAub3B0aW9ucyA9IHt9O1xuXG4gIEh0dHAuaGVhZGVycyA9IHtcbiAgICAgIHB1dDogSlNPTl9DT05URU5UX1RZUEUsXG4gICAgICBwb3N0OiBKU09OX0NPTlRFTlRfVFlQRSxcbiAgICAgIHBhdGNoOiBKU09OX0NPTlRFTlRfVFlQRSxcbiAgICAgIGRlbGV0ZTogSlNPTl9DT05URU5UX1RZUEUsXG4gICAgICBjdXN0b206IENVU1RPTV9IRUFERVJTLFxuICAgICAgY29tbW9uOiBDT01NT05fSEVBREVSU1xuICB9O1xuXG4gIEh0dHAuaW50ZXJjZXB0b3JzID0gW2JlZm9yZSwgdGltZW91dCwgbWV0aG9kLCBib2R5LCBqc29ucCwgaGVhZGVyLCBjb3JzXTtcblxuICBbJ2dldCcsICdkZWxldGUnLCAnaGVhZCcsICdqc29ucCddLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuXG4gICAgICBIdHRwW21ldGhvZF0gPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMoYXNzaWduKG9wdGlvbnMgfHwge30sIHsgdXJsOiB1cmwsIG1ldGhvZDogbWV0aG9kIH0pKTtcbiAgICAgIH07XG4gIH0pO1xuXG4gIFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcblxuICAgICAgSHR0cFttZXRob2RdID0gZnVuY3Rpb24gKHVybCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICAgIHJldHVybiB0aGlzKGFzc2lnbihvcHRpb25zIHx8IHt9LCB7IHVybDogdXJsLCBtZXRob2Q6IG1ldGhvZCwgYm9keTogYm9keSB9KSk7XG4gICAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBSZXNvdXJjZSh1cmwsIHBhcmFtcywgYWN0aW9ucywgb3B0aW9ucykge1xuXG4gICAgICB2YXIgc2VsZiA9IHRoaXMgfHwge30sXG4gICAgICAgICAgcmVzb3VyY2UgPSB7fTtcblxuICAgICAgYWN0aW9ucyA9IGFzc2lnbih7fSwgUmVzb3VyY2UuYWN0aW9ucywgYWN0aW9ucyk7XG5cbiAgICAgIGVhY2goYWN0aW9ucywgZnVuY3Rpb24gKGFjdGlvbiwgbmFtZSkge1xuXG4gICAgICAgICAgYWN0aW9uID0gbWVyZ2UoeyB1cmw6IHVybCwgcGFyYW1zOiBwYXJhbXMgfHwge30gfSwgb3B0aW9ucywgYWN0aW9uKTtcblxuICAgICAgICAgIHJlc291cmNlW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gKHNlbGYuJGh0dHAgfHwgSHR0cCkob3B0cyhhY3Rpb24sIGFyZ3VtZW50cykpO1xuICAgICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHJlc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gb3B0cyhhY3Rpb24sIGFyZ3MpIHtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhc3NpZ24oe30sIGFjdGlvbiksXG4gICAgICAgICAgcGFyYW1zID0ge30sXG4gICAgICAgICAgYm9keTtcblxuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuXG4gICAgICAgICAgY2FzZSAyOlxuXG4gICAgICAgICAgICAgIHBhcmFtcyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgIGJvZHkgPSBhcmdzWzFdO1xuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxOlxuXG4gICAgICAgICAgICAgIGlmICgvXihQT1NUfFBVVHxQQVRDSCkkL2kudGVzdChvcHRpb25zLm1ldGhvZCkpIHtcbiAgICAgICAgICAgICAgICAgIGJvZHkgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAwOlxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcblxuICAgICAgICAgICAgICB0aHJvdyAnRXhwZWN0ZWQgdXAgdG8gNCBhcmd1bWVudHMgW3BhcmFtcywgYm9keV0sIGdvdCAnICsgYXJncy5sZW5ndGggKyAnIGFyZ3VtZW50cyc7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMuYm9keSA9IGJvZHk7XG4gICAgICBvcHRpb25zLnBhcmFtcyA9IGFzc2lnbih7fSwgb3B0aW9ucy5wYXJhbXMsIHBhcmFtcyk7XG5cbiAgICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgUmVzb3VyY2UuYWN0aW9ucyA9IHtcblxuICAgICAgZ2V0OiB7IG1ldGhvZDogJ0dFVCcgfSxcbiAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcgfSxcbiAgICAgIHF1ZXJ5OiB7IG1ldGhvZDogJ0dFVCcgfSxcbiAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnIH0sXG4gICAgICByZW1vdmU6IHsgbWV0aG9kOiAnREVMRVRFJyB9LFxuICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScgfVxuXG4gIH07XG5cbiAgZnVuY3Rpb24gcGx1Z2luKFZ1ZSkge1xuXG4gICAgICBpZiAocGx1Z2luLmluc3RhbGxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgVXRpbChWdWUpO1xuXG4gICAgICBWdWUudXJsID0gVXJsO1xuICAgICAgVnVlLmh0dHAgPSBIdHRwO1xuICAgICAgVnVlLnJlc291cmNlID0gUmVzb3VyY2U7XG4gICAgICBWdWUuUHJvbWlzZSA9IFByb21pc2UkMTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVnVlLnByb3RvdHlwZSwge1xuXG4gICAgICAgICAgJHVybDoge1xuICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zKFZ1ZS51cmwsIHRoaXMsIHRoaXMuJG9wdGlvbnMudXJsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAkaHR0cDoge1xuICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zKFZ1ZS5odHRwLCB0aGlzLCB0aGlzLiRvcHRpb25zLmh0dHApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSxcblxuICAgICAgICAgICRyZXNvdXJjZToge1xuICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBWdWUucmVzb3VyY2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAkcHJvbWlzZToge1xuICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXhlY3V0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFZ1ZS5Qcm9taXNlKGV4ZWN1dG9yLCBfdGhpcyk7XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICB9KTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVnVlKSB7XG4gICAgICB3aW5kb3cuVnVlLnVzZShwbHVnaW4pO1xuICB9XG5cbiAgcmV0dXJuIHBsdWdpbjtcblxufSkpOyJdfQ==
