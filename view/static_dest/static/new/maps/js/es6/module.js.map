{"version":3,"sources":["es6/module.js"],"names":["timeout","ms","Promise","resolve","reject","setTimeout","_profile","require","console","log","firstName","then","value","promise","p1","Error","p2","result","catch","error","arr","a","obj","Proxy","get","target","key","receiver","Reflect","set","count"],"mappings":"AAAA,YAKA,SAAAA,SAAAC,GACA,MAAA,IAAAC,SAAA,SAAAC,EAAAC,GACAC,WAAAF,EAAAF,EAAA,UALA,GAAAK,UAAAC,QAAA,eAEAC,SAAAC,IAAAH,SAAAI,WAMAV,QAAA,KAAAW,KAAA,SAAAC,GACAJ,QAAAC,IAAAG,IAEA,IAAAC,SAAA,GAAAX,SAAA,SAAAC,EAAAC,GACAI,QAAAC,IAAA,WACAN,KAGAU,SAAAF,KAAA,WACAH,QAAAC,IAAA,eAGAD,QAAAC,IAAA,MACA,IAAAK,IAAA,GAAAZ,SAAA,SAAAC,EAAAC,GACAC,WAAA,WACA,MAAAD,GAAA,GAAAW,OAAA,UACA,OAGAC,GAAA,GAAAd,SAAA,SAAAC,EAAAC,GACAC,WAAA,WACA,MAAAF,GAAAW,KACA,MAGAE,IAAAL,KAAA,SAAAM,GACA,MAAAT,SAAAC,IAAAQ,KACAC,MAAA,SAAAC,GACA,MAAAX,SAAAC,IAAAU,KAGAd,WAAA,WACAG,QAAAC,IAAA,UACA,GAEAP,QAAAC,UAAAQ,KAAA,WACAH,QAAAC,IAAA,SAGAD,QAAAC,IAAA,MACA,IAAAW,MAAA,IAAA,IAAA,IAAA,IAEA,KAAA,GAAAC,KAAAD,KACAZ,QAAAC,IAAAY,EAEA,IAAAC,KAAA,GAAAC,WACAC,IAAA,SAAAC,EAAAC,EAAAC,GAEA,MADAnB,SAAAC,IAAA,WAAAiB,EAAA,KACAE,QAAAJ,IAAAC,EAAAC,EAAAC,IAEAE,IAAA,SAAAJ,EAAAC,EAAAd,EAAAe,GAEA,MADAnB,SAAAC,IAAA,WAAAiB,EAAA,KACAE,QAAAC,IAAAJ,EAAAC,EAAAd,EAAAe,KAGAL,KAAAQ,MAAA,IACAR,IAAAQ","file":"../../../js/es6/module.js","sourcesContent":["import {firstName, lastName, year} from './profile.js';\nconsole.log(firstName)\nfunction timeout(ms){\n    return new Promise((resolve,reject)=>{\n        setTimeout(resolve,ms,'done');\n    })\n}\ntimeout(1000).then((value)=>{\n    console.log(value);\n})\nlet promise = new Promise(function(resolve, reject) {\n  console.log('Promise');\n  resolve();\n});\n\npromise.then(function() {\n  console.log('Resolved.');\n});\n\nconsole.log('Hi!');\nvar p1 = new Promise(function (resolve, reject) {\n  setTimeout(() => reject(new Error('fail')), 3000)\n})\n\nvar p2 = new Promise(function (resolve, reject) {\n  setTimeout(() => resolve(p1), 1000)\n})\n\np2\n  .then(result => console.log(result))\n  .catch(error => console.log(error))\n\n\nsetTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');  \nvar arr = ['a', 'b', 'c', 'd'];\n\nfor (let a in arr) {\n  console.log(a); // 0 1 2 3\n}\nvar obj = new Proxy({}, {\n  get: function (target, key, receiver) {\n    console.log(`getting ${key}!`);\n    return Reflect.get(target, key, receiver);\n  },\n  set: function (target, key, value, receiver) {\n    console.log(`setting ${key}!`);\n    return Reflect.set(target, key, value, receiver);\n  }\n});\nobj.count = 1\n++obj.count"]}